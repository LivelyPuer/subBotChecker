require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const Database = require('./database');

const bot = new Telegraf(process.env.BOT_TOKEN);
const db = new Database();

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
const STATES = {
    IDLE: 'idle',
    ADDING_CHANNEL: 'adding_channel',
    CREATING_POST_MESSAGE: 'creating_post_message',
    CREATING_POST_PHOTO: 'creating_post_photo',
    CREATING_POST_SUCCESS: 'creating_post_success',
    CREATING_POST_FAIL: 'creating_post_fail',
    CREATING_POST_BUTTON: 'creating_post_button',
    EDITING_POST_MESSAGE: 'editing_post_message',
    EDITING_POST_PHOTO: 'editing_post_photo',
    EDITING_POST_SUCCESS: 'editing_post_success',
    EDITING_POST_FAIL: 'editing_post_fail',
    EDITING_POST_BUTTON: 'editing_post_button'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
bot.use((ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (!ctx.session.state) {
        ctx.session.state = STATES.IDLE;
    }
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
    const startMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    `;
    
    const mainMenuKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'main_my_channels')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'main_add_channel')],
        [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'main_help')]
    ]);
    
    await ctx.reply(startMessage, mainMenuKeyboard);
});

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏
const showHelpMenu = async (ctx, editMessage = false) => {
    const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üë§ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚öôÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É

‚ùó –í–∞–∂–Ω–æ: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!
    `;
    
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'main_my_channels')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'main_add_channel')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    if (editMessage) {
        await ctx.editMessageText(helpMessage, keyboard);
    } else {
        await ctx.reply(helpMessage, keyboard);
    }
};

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
bot.command('help', async (ctx) => {
    await showHelpMenu(ctx);
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const showMainMenu = async (ctx, editMessage = false) => {
    const message = `
ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `;
    
    const mainMenuKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'main_my_channels')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'main_add_channel')],
        [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'main_help')]
    ]);
    
    if (editMessage) {
        await ctx.editMessageText(message, mainMenuKeyboard);
    } else {
        await ctx.reply(message, mainMenuKeyboard);
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
const showPostPreview = async (ctx) => {
    try {
        const post = ctx.session.currentPost;
        
        if (!post) {
            await ctx.reply('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞');
            return;
        }
        
        const previewMessage = 'üìã **–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞:**\n\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:';
        await ctx.reply(previewMessage);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç
        const postKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback(post.buttonText, `check_${post.id}`)]
        ]);
        
        if (post.photoFileId) {
            await ctx.replyWithPhoto(
                post.photoFileId,
                {
                    caption: post.messageText,
                    parse_mode: 'Markdown',
                    reply_markup: postKeyboard.reply_markup
                }
            );
        } else {
            await ctx.reply(
                post.messageText,
                {
                    parse_mode: 'Markdown',
                    ...postKeyboard
                }
            );
        }
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–º
        const controlKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª', 'publish_current_post')],
            [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_current_post')],
            [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'delete_current_post')],
            [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'my_channels')]
        ]);
        
        await ctx.reply('üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–º:**', controlKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–≤—å—é:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–≤—å—é');
    }
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.command('menu', async (ctx) => {
    ctx.session.state = STATES.IDLE;
    await showMainMenu(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('mychannels', async (ctx) => {
    await showMyChannels(ctx);
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const showMyChannels = async (ctx, editMessage = false) => {
    try {
        const userId = ctx.from.id.toString();
        const userChannels = await db.getUserChannels(userId);
        
        if (userChannels.length === 0) {
            const message = 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.';
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'main_add_channel')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            if (editMessage) {
                await ctx.editMessageText(message, keyboard);
            } else {
                await ctx.reply(message, keyboard);
            }
            return;
        }
        
        const keyboard = [
            ...userChannels.map(channel => 
                [Markup.button.callback(`üì¢ ${channel.channel_name}`, `channel_${channel.channel_id}`)]
            ),
            [
                Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'main_add_channel'),
                Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')
            ]
        ];
        
        const message = 'üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:';
        
        if (editMessage) {
            await ctx.editMessageText(message, Markup.inlineKeyboard(keyboard));
        } else {
            await ctx.reply(message, Markup.inlineKeyboard(keyboard));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
const startAddingChannel = async (ctx, editMessage = false) => {
    ctx.session.state = STATES.ADDING_CHANNEL;
    
    const botUsername = ctx.botInfo.username;
    
    const message = `
üì¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞

üî∏ **–®–∞–≥ 1:** –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
üî∏ **–®–∞–≥ 2:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username

üìã **–§–æ—Ä–º–∞—Ç—ã ID –∫–∞–Ω–∞–ª–∞:**
‚Ä¢ @channelname (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
‚Ä¢ -100xxxxxxxxx (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)

üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –±–æ—Ç—É @userinfobot
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Chat ID

‚ö° **–ì–æ—Ç–æ–≤—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞?** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!
    `;
    
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.url('ü§ñ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª', `https://t.me/${botUsername}?startchannel&admin=post_messages+edit_messages+delete_messages+restrict_members`)],
        [Markup.button.callback('üìù –í–≤–µ—Å—Ç–∏ ID –∫–∞–Ω–∞–ª–∞', 'input_channel_id')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
    ]);
    
    if (editMessage) {
        await ctx.editMessageText(message, keyboard);
    } else {
        await ctx.reply(message, keyboard);
    }
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
bot.command('addchannel', async (ctx) => {
    await startAddingChannel(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
bot.on('text', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (ctx.session.state === STATES.ADDING_CHANNEL) {
        const channelInput = ctx.message.text.trim();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
            const chatMember = await ctx.telegram.getChatMember(channelInput, userId);
            
            if (chatMember.status !== 'administrator' && chatMember.status !== 'creator') {
                await ctx.reply('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ–±—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            const chat = await ctx.telegram.getChat(channelInput);
            
            await db.addChannel(channelInput, chat.title || chat.username);
            await db.addChannelAdmin(channelInput, userId);
            
            ctx.session.state = STATES.IDLE;
            
            const successMessage = `‚úÖ –ö–∞–Ω–∞–ª "${chat.title || chat.username}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.`;
            const addChannelKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'my_channels')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            await ctx.reply(successMessage, addChannelKeyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
            
            ctx.session.state = STATES.IDLE;
            
            const botUsername = ctx.botInfo?.username || 'YourBot';
            const errorMessage = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª

üîç **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ ID –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª
‚Ä¢ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑`;
            
            const errorKeyboard = Markup.inlineKeyboard([
                [Markup.button.url('ü§ñ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª', `https://t.me/${botUsername}?startchannel&admin=post_messages+edit_messages+delete_messages+restrict_members`)],
                [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'input_channel_id')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            await ctx.reply(errorMessage, errorKeyboard);
        }
    } else if (ctx.session.state === STATES.CREATING_POST_MESSAGE) {
        ctx.session.postData.messageText = ctx.message.text;
        ctx.session.state = STATES.CREATING_POST_PHOTO;
        
        const message = 'üñºÔ∏è –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–æ—Å—Ç—É?\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":';
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_photo')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
        ]);
        
        await ctx.reply(message, keyboard);
    } else if (ctx.session.state === STATES.CREATING_POST_SUCCESS) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        if (ctx.message.text.length > 190) {
            const message = '‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 190 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: ' + ctx.message.text.length + '\n\n–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç:';
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
            ]);
            
            await ctx.reply(message, keyboard);
            return;
        }
        
        ctx.session.postData.successText = ctx.message.text;
        ctx.session.state = STATES.CREATING_POST_FAIL;
        
        const failMessage = `‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:

üí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ *–ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω—ã* –Ω–∞ –∫–∞–Ω–∞–ª.`;
        const failKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'use_default_fail')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
        ]);
        
        await ctx.reply(failMessage, { parse_mode: 'Markdown', ...failKeyboard });
    } else if (ctx.session.state === STATES.CREATING_POST_FAIL) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        if (ctx.message.text.length > 190) {
            const warningMessage = '‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 190 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: ' + ctx.message.text.length + '\n\n–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç:';
            const warningKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'use_default_fail')],
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
            ]);
            
            await ctx.reply(warningMessage, warningKeyboard);
            return;
        }
        
        ctx.session.postData.failText = ctx.message.text;
        ctx.session.state = STATES.CREATING_POST_BUTTON;
        
        const buttonMessage = 'üîò –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"):';
        const buttonKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'use_default_button')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
        ]);
        
        await ctx.reply(buttonMessage, buttonKeyboard);
    } else if (ctx.session.state === STATES.EDITING_POST_MESSAGE) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.currentPost.messageText = ctx.message.text;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            await db.updatePostMessage(ctx.session.currentPost.id, ctx.message.text);
            
            ctx.session.state = STATES.IDLE;
            
            await ctx.reply('‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!');
            await showPostPreview(ctx);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else if (ctx.session.state === STATES.EDITING_POST_SUCCESS) {
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.currentPost.successText = ctx.message.text;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            await db.updatePostSuccessText(ctx.session.currentPost.id, ctx.message.text);
            
            ctx.session.state = STATES.IDLE;
            
            await ctx.reply('‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!');
            await showPostPreview(ctx);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—Ö–∞:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else if (ctx.session.state === STATES.EDITING_POST_FAIL) {
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.currentPost.failText = ctx.message.text;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            await db.updatePostFailText(ctx.session.currentPost.id, ctx.message.text);
            
            ctx.session.state = STATES.IDLE;
            
            await ctx.reply('‚úÖ –¢–µ–∫—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!');
            await showPostPreview(ctx);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—É–¥–∞—á–∏:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else if (ctx.session.state === STATES.EDITING_POST_BUTTON) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.currentPost.buttonText = ctx.message.text;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            await db.updatePostButtonText(ctx.session.currentPost.id, ctx.message.text);
            
            ctx.session.state = STATES.IDLE;
            
            await ctx.reply('‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!');
            await showPostPreview(ctx);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else if (ctx.session.state === STATES.CREATING_POST_BUTTON) {
        const buttonText = ctx.message.text || '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';
        ctx.session.postData.buttonText = buttonText;
        
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const postId = await db.createPost(
                ctx.session.postData.channelId,
                ctx.session.postData.messageText,
                ctx.session.postData.successText,
                ctx.session.postData.failText || '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                buttonText,
                ctx.session.postData.photoFileId
            );
            

            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
            const postKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, `check_${postId}`)]
            ]);
            
            const previewMessage = 'üìã **–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞:**\n\n–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç. –ü–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –≤ –∫–∞–Ω–∞–ª?';
            await ctx.reply(previewMessage);
            
            if (ctx.session.postData.photoFileId) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ
                await ctx.replyWithPhoto(
                    ctx.session.postData.photoFileId,
                    {
                        caption: ctx.session.postData.messageText,
                        reply_markup: postKeyboard.reply_markup
                    }
                );
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
                await ctx.reply(
                    ctx.session.postData.messageText,
                    postKeyboard
                );
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            ctx.session.currentPost = {
                id: postId,
                channelId: ctx.session.postData.channelId,
                messageText: ctx.session.postData.messageText,
                successText: ctx.session.postData.successText,
                failText: ctx.session.postData.failText || '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                buttonText: buttonText,
                photoFileId: ctx.session.postData.photoFileId
            };
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–º
            const controlKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª', 'publish_current_post')],
                [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_current_post')],
                [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'delete_current_post')],
                [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'my_channels')]
            ]);
            
            ctx.session.state = STATES.IDLE;
            delete ctx.session.postData;
            
            await ctx.reply('üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–º:**', controlKeyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on('photo', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (ctx.session.state === STATES.CREATING_POST_PHOTO) {
        // –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        ctx.session.postData.photoFileId = photo.file_id;
        
        ctx.session.state = STATES.CREATING_POST_SUCCESS;
        
        const message = `‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!

üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:

üí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ *–ø–æ–¥–ø–∏—Å–∞–Ω—ã* –Ω–∞ –∫–∞–Ω–∞–ª.`;
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
        ]);
        
        await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
    } else if (ctx.session.state === STATES.EDITING_POST_PHOTO) {
        try {
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            ctx.session.currentPost.photoFileId = photo.file_id;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.updatePostPhoto(ctx.session.currentPost.id, photo.file_id);
            
            ctx.session.state = STATES.IDLE;
            
            await ctx.reply('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
            await showPostPreview(ctx);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else {
        await ctx.reply('‚ùì –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (ctx) => {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id.toString();
    
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'main_menu') {
        ctx.session.state = STATES.IDLE;
        await ctx.answerCbQuery();
        await showMainMenu(ctx, true);
    } else if (data === 'main_my_channels') {
        await ctx.answerCbQuery();
        await showMyChannels(ctx, true);
    } else if (data === 'main_add_channel') {
        await ctx.answerCbQuery();
        await startAddingChannel(ctx, true);
    } else if (data === 'main_help') {
        await ctx.answerCbQuery();
        await showHelpMenu(ctx, true);
    } else if (data === 'cancel_action') {
        ctx.session.state = STATES.IDLE;
        await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        await showMainMenu(ctx, true);
    } else if (data === 'input_channel_id') {
        ctx.session.state = STATES.ADDING_CHANNEL;
        
        const message = `
üìù –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞

üìã **–ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ @channelname
‚Ä¢ -100xxxxxxxxx

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!
        `;
        
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('ÔøΩÔøΩ –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é', 'main_add_channel')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(message, keyboard);
    } else if (data === 'my_channels') {
        try {
            const userChannels = await db.getUserChannels(userId);
            
            if (userChannels.length === 0) {
                await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤');
                return;
            }
            
            const keyboard = userChannels.map(channel => 
                [Markup.button.callback(`üì¢ ${channel.channel_name}`, `channel_${channel.channel_id}`)]
            );
            
            await showMyChannels(ctx, true);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    } else if (data.startsWith('channel_')) {
        const channelId = data.replace('channel_', '');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const isAdmin = await db.isChannelAdmin(userId, channelId);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º');
                return;
            }
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', `create_post_${channelId}`)],
                [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞', `settings_${channelId}`)],
                [Markup.button.callback('üîô –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'my_channels')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            const chat = await ctx.telegram.getChat(channelId);
            
            await ctx.editMessageText(
                `üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: ${chat.title || chat.username}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
                keyboard
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    } else if (data.startsWith('create_post_')) {
        const channelId = data.replace('create_post_', '');
        
        ctx.session.state = STATES.CREATING_POST_MESSAGE;
        ctx.session.postData = { channelId };
        
        await ctx.answerCbQuery();
        
        const message = `üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞:

üí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.`;
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
        ]);
        
        await ctx.reply(message, keyboard);
    } else if (data.startsWith('check_')) {
        const postId = data.replace('check_', '');
        
        try {
            const post = await db.getPost(postId);
            
            if (!post) {
                await ctx.answerCbQuery('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const chatMember = await ctx.telegram.getChatMember(post.channel_id, userId);
            
            if (chatMember.status === 'member' || chatMember.status === 'administrator' || chatMember.status === 'creator') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
                const successMessage = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\n\n${post.success_text}`;
                await ctx.answerCbQuery(successMessage, true);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
                const failMessage = `‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n${post.fail_text}`;
                await ctx.answerCbQuery(failMessage, true);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', true);
        }
    } else if (data.startsWith('settings_')) {
        const channelId = data.replace('settings_', '');
        
        try {
            const isAdmin = await db.isChannelAdmin(userId, channelId);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º');
                return;
            }
            
            const chat = await ctx.telegram.getChat(channelId);
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', `delete_channel_${channelId}`)],
                [Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', `manage_admins_${channelId}`)],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª—É', `channel_${channelId}`)],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            await ctx.answerCbQuery();
            await ctx.editMessageText(
                `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞: ${chat.title || chat.username}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
                keyboard
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    } else if (data.startsWith('delete_channel_')) {
        const channelId = data.replace('delete_channel_', '');
        
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${channelId}`)],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `settings_${channelId}`)]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(
            '‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
            keyboard
        );
    } else if (data.startsWith('confirm_delete_')) {
        const channelId = data.replace('confirm_delete_', '');
        
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.answerCbQuery('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
            await showMyChannels(ctx, true);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
        } else if (data.startsWith('manage_admins_')) {
        const channelId = data.replace('manage_admins_', '');
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(
            'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', `settings_${channelId}`)]
            ])
        );
    } else if (data === 'publish_current_post') {
        const post = ctx.session.currentPost;
        
        if (!post) {
            await ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            return;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const isAdmin = await db.isChannelAdmin(userId, post.channelId);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ');
                return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
            const publishKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback(post.buttonText, `check_${post.id}`)]
            ]);
            
            let sentMessage;
            if (post.photoFileId) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ
                sentMessage = await ctx.telegram.sendPhoto(
                    post.channelId,
                    post.photoFileId,
                    {
                        caption: post.messageText,
                        parse_mode: 'Markdown',
                        reply_markup: publishKeyboard.reply_markup
                    }
                );
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
                sentMessage = await ctx.telegram.sendMessage(
                    post.channelId,
                    post.messageText,
                    {
                        parse_mode: 'Markdown',
                        ...publishKeyboard
                    }
                );
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await db.updatePostMessageId(post.id, sentMessage.message_id);
            
            await ctx.answerCbQuery('‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!');
            
            const successMessage = '‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!';
            const successKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'my_channels')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            await ctx.editMessageText(successMessage, successKeyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
        }
    } else if (data === 'delete_current_post') {
        const confirmKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'confirm_delete_current_post')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'back_to_post')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(
            '‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?\n\n–û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
            confirmKeyboard
        );
    } else if (data === 'confirm_delete_current_post') {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            delete ctx.session.currentPost;
            
            await ctx.answerCbQuery('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤');
            await showMyChannels(ctx, true);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
    } else if (data === 'edit_current_post') {
        const post = ctx.session.currentPost;
        
        if (!post) {
            await ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const isAdmin = await db.isChannelAdmin(userId, post.channelId);
        
        if (!isAdmin) {
            await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞');
            return;
        }
        
        const editMessage = `‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**
        
üìù **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:** ${post.messageText.substring(0, 100)}${post.messageText.length > 100 ? '...' : ''}
üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** ${post.photoFileId ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}
‚úÖ **–¢–µ–∫—Å—Ç —É—Å–ø–µ—Ö–∞:** ${post.successText.substring(0, 50)}...
‚ùå **–¢–µ–∫—Å—Ç –Ω–µ—É–¥–∞—á–∏:** ${post.failText ? post.failText.substring(0, 50) : '–ù–µ –∑–∞–¥–∞–Ω'}...
üîò **–ö–Ω–æ–ø–∫–∞:** ${post.buttonText}

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`;
        
        const editKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', 'edit_message')],
            [
                Markup.button.callback('üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', 'edit_photo'),
                Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', 'remove_photo')
            ],
            [Markup.button.callback('‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—Ö–∞', 'edit_success')],
            [Markup.button.callback('‚ùå –¢–µ–∫—Å—Ç –Ω–µ—É–¥–∞—á–∏', 'edit_fail')],
            [Markup.button.callback('üîò –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏', 'edit_button')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É', 'back_to_post')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(editMessage, editKeyboard);
    } else if (data === 'edit_message') {
        ctx.session.state = STATES.EDITING_POST_MESSAGE;
        
        const message = `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:

üí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.`;
        
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_editing')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
    } else if (data === 'edit_photo') {
        ctx.session.state = STATES.EDITING_POST_PHOTO;
        
        const message = 'üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞:';
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_editing')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(message, keyboard);
    } else if (data === 'remove_photo') {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            ctx.session.currentPost.photoFileId = null;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.removePostPhoto(ctx.session.currentPost.id);
            
            await ctx.answerCbQuery('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!');
            await showPostPreview(ctx);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
    } else if (data === 'edit_success') {
        ctx.session.state = STATES.EDITING_POST_SUCCESS;
        
        const message = `‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:

üí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ <b>–ø–æ–¥–ø–∏—Å–∞–Ω—ã</b> –Ω–∞ –∫–∞–Ω–∞–ª.`;
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_editing')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(message, keyboard);
    } else if (data === 'edit_fail') {
        ctx.session.state = STATES.EDITING_POST_FAIL;
        
        const message = `‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:

üí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ <b>–ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω—ã</b> –Ω–∞ –∫–∞–Ω–∞–ª.`;
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_editing')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(message, keyboard);
    } else if (data === 'edit_button') {
        ctx.session.state = STATES.EDITING_POST_BUTTON;
        
        const message = 'üîò –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:';
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_editing')]
        ]);
        
        await ctx.answerCbQuery();
        await ctx.editMessageText(message, keyboard);
    } else if (data === 'back_to_post') {
        await ctx.answerCbQuery();
        await showPostPreview(ctx);
    } else if (data === 'cancel_editing') {
        ctx.session.state = STATES.IDLE;
        
        await ctx.answerCbQuery('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        await showMainMenu(ctx, true);
    } else if (data === 'use_default_button') {
         if (ctx.session.state === STATES.CREATING_POST_BUTTON && ctx.session.postData) {
             const buttonText = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';
             ctx.session.postData.buttonText = buttonText;
             
             try {
                 // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                 const postId = await db.createPost(
                     ctx.session.postData.channelId,
                     ctx.session.postData.messageText,
                     ctx.session.postData.successText,
                     ctx.session.postData.failText || '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                     buttonText,
                     ctx.session.postData.photoFileId
                 );
                 

                 
                 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
                 const defaultPostKeyboard = Markup.inlineKeyboard([
                     [Markup.button.callback(buttonText, `check_${postId}`)]
                 ]);
                 
                 await ctx.answerCbQuery('–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!');
                 
                 const previewMessage = 'üìã **–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞:**\n\n–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç. –ü–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –≤ –∫–∞–Ω–∞–ª?';
                 await ctx.editMessageText(previewMessage);
                 
                 if (ctx.session.postData.photoFileId) {
                     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ
                     await ctx.replyWithPhoto(
                         ctx.session.postData.photoFileId,
                         {
                             caption: ctx.session.postData.messageText,
                             reply_markup: defaultPostKeyboard.reply_markup
                         }
                     );
                 } else {
                     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
                     await ctx.reply(
                         ctx.session.postData.messageText,
                         defaultPostKeyboard
                     );
                 }
                 
                 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                 ctx.session.currentPost = {
                     id: postId,
                     channelId: ctx.session.postData.channelId,
                     messageText: ctx.session.postData.messageText,
                     successText: ctx.session.postData.successText,
                     failText: ctx.session.postData.failText || '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                     buttonText: buttonText,
                     photoFileId: ctx.session.postData.photoFileId
                 };
                 
                 // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–º
                 const controlKeyboard = Markup.inlineKeyboard([
                     [Markup.button.callback('üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª', 'publish_current_post')],
                     [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_current_post')],
                     [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'delete_current_post')],
                     [Markup.button.callback('üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'my_channels')]
                 ]);
                 
                 ctx.session.state = STATES.IDLE;
                 delete ctx.session.postData;
                 
                 await ctx.reply('üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–º:**', controlKeyboard);
             } catch (error) {
                 console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
                 await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
             }
         } else {
             await ctx.answerCbQuery('–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
         }
     } else if (data === 'skip_photo') {
         if (ctx.session.state === STATES.CREATING_POST_PHOTO && ctx.session.postData) {
                           ctx.session.state = STATES.CREATING_POST_SUCCESS;
              
              const message = 'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\nüí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 190 —Å–∏–º–≤–æ–ª–æ–≤.';
              const keyboard = Markup.inlineKeyboard([
                  [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
              ]);
             
             await ctx.answerCbQuery('–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
             await ctx.editMessageText(message, keyboard);
         } else {
             await ctx.answerCbQuery('–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
         }
     }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
    console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', ctx);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(async () => {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
        const botInfo = await bot.telegram.getMe();
        bot.botInfo = botInfo;
        
        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìã Username –±–æ—Ç–∞: @${botInfo.username}`);
        console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
    });

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 