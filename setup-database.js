#!/usr/bin/env node

const { Pool } = require('pg');
const fs = require('fs');
require('dotenv').config();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const dbConfig = {
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    password: process.env.DB_PASSWORD || 'password',
    port: process.env.DB_PORT || 5432,
    ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
};

const targetDbName = process.env.DB_NAME || 'subscription_bot';
const botUser = process.env.DB_USER || 'botuser';
const botPassword = process.env.DB_PASSWORD || 'secure_password_2024';

async function setupDatabase() {
    let adminPool;
    let botPool;
    
    try {
        log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'blue');
        
        // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        log('\n1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...', 'yellow');
        adminPool = new Pool({
            ...dbConfig,
            database: 'postgres' // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
        });
        
        await testConnection(adminPool, 'PostgreSQL (—Å–∏—Å—Ç–µ–º–Ω–∞—è –ë–î)');
        
        // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞...', 'yellow');
        await createBotUser(adminPool);
        
        // 3. –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
        await createDatabase(adminPool);
        
        await adminPool.end();
        
        // 4. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        log('\n4Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...', 'yellow');
        botPool = new Pool({
            ...dbConfig,
            database: targetDbName,
            user: botUser,
            password: botPassword
        });
        
        await testConnection(botPool, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞');
        
        // 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        log('\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...', 'yellow');
        await createTables(botPool);
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...', 'yellow');
        await checkTables(botPool);
        
        log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!', 'green');
        log('üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: node bot.js', 'green');
        
    } catch (error) {
        log(`\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'red');
        log('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ .env —Ñ–∞–π–ª–µ', 'yellow');
        process.exit(1);
    } finally {
        if (adminPool) await adminPool.end().catch(() => {});
        if (botPool) await botPool.end().catch(() => {});
    }
}

async function testConnection(pool, description) {
    try {
        const result = await pool.query('SELECT NOW() as current_time, version() as pg_version');
        log(`‚úÖ ${description}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ`, 'green');
        log(`   –í—Ä–µ–º—è: ${result.rows[0].current_time}`, 'blue');
        log(`   –í–µ—Ä—Å–∏—è: ${result.rows[0].pg_version.split(' ')[0]} ${result.rows[0].pg_version.split(' ')[1]}`, 'blue');
    } catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${description}: ${error.message}`);
    }
}

async function createBotUser(pool) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userCheck = await pool.query(
            'SELECT 1 FROM pg_roles WHERE rolname = $1',
            [botUser]
        );
        
        if (userCheck.rows.length > 0) {
            log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${botUser}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'green');
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await pool.query(`CREATE USER ${botUser} WITH ENCRYPTED PASSWORD '${botPassword}'`);
            log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${botUser}'`, 'green');
        }
        
        // –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î (–Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
        await pool.query(`ALTER USER ${botUser} CREATEDB`);
        log(`‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '${botUser}'`, 'green');
        
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }
}

async function createDatabase(pool) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        const dbCheck = await pool.query(
            'SELECT 1 FROM pg_database WHERE datname = $1',
            [targetDbName]
        );
        
        if (dbCheck.rows.length > 0) {
            log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '${targetDbName}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'green');
        } else {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await pool.query(`CREATE DATABASE ${targetDbName} OWNER ${botUser}`);
            log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '${targetDbName}'`, 'green');
        }
        
        // –î–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ë–î
        await pool.query(`GRANT ALL PRIVILEGES ON DATABASE ${targetDbName} TO ${botUser}`);
        log(`‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö '${targetDbName}'`, 'green');
        
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
}

async function createTables(pool) {
    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS channels (
                id SERIAL PRIMARY KEY,
                channel_id TEXT UNIQUE NOT NULL,
                channel_name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ channels —Å–æ–∑–¥–∞–Ω–∞', 'green');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS channel_admins (
                id SERIAL PRIMARY KEY,
                channel_id TEXT NOT NULL,
                user_id BIGINT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (channel_id) REFERENCES channels(channel_id) ON DELETE CASCADE
            )
        `);
        log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ channel_admins —Å–æ–∑–¥–∞–Ω–∞', 'green');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å—Ç–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS posts (
                id SERIAL PRIMARY KEY,
                channel_id TEXT NOT NULL,
                message_text TEXT NOT NULL,
                success_text TEXT NOT NULL,
                fail_text TEXT DEFAULT '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                button_text TEXT NOT NULL,
                photo_file_id TEXT DEFAULT NULL,
                message_id INTEGER DEFAULT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (channel_id) REFERENCES channels(channel_id) ON DELETE CASCADE
            )
        `);
        log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ posts —Å–æ–∑–¥–∞–Ω–∞', 'green');

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await pool.query('CREATE INDEX IF NOT EXISTS idx_channel_admins_user_id ON channel_admins(user_id)');
        await pool.query('CREATE INDEX IF NOT EXISTS idx_channel_admins_channel_id ON channel_admins(channel_id)');
        await pool.query('CREATE INDEX IF NOT EXISTS idx_posts_channel_id ON posts(channel_id)');
        log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã', 'green');

        // –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await pool.query('GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $1', [botUser]);
        await pool.query('GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $1', [botUser]);
        log('‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã', 'green');

    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: ${error.message}`);
    }
}

async function checkTables(pool) {
    try {
        const result = await pool.query(`
            SELECT 
                schemaname,
                tablename,
                tableowner
            FROM pg_tables 
            WHERE schemaname = 'public'
            ORDER BY tablename
        `);
        
        log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', 'blue');
        result.rows.forEach(row => {
            log(`   ‚Ä¢ ${row.tablename} (–≤–ª–∞–¥–µ–ª–µ—Ü: ${row.tableowner})`, 'green');
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        const tables = ['channels', 'channel_admins', 'posts'];
        log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:', 'blue');
        
        for (const table of tables) {
            try {
                const count = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
                log(`   ‚Ä¢ ${table}: ${count.rows[0].count} –∑–∞–ø–∏—Å–µ–π`, 'green');
            } catch (error) {
                log(`   ‚Ä¢ ${table}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è (${error.message})`, 'red');
            }
        }
        
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: ${error.message}`);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if (!fs.existsSync('.env')) {
    log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'red');
    log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example', 'yellow');
    process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è Subscription Bot', 'blue');
log('=' .repeat(50), 'blue');

setupDatabase(); 