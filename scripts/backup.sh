#!/bin/bash

# üíæ –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Subscription Checker Bot
# –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

PROJECT_DIR="/opt/subBotChecker"
BACKUP_DIR="/backup/subBotChecker"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="subbot_backup_$DATE"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
create_backup_dir() {
    if [[ ! -d "$BACKUP_DIR" ]]; then
        mkdir -p "$BACKUP_DIR"
        print_status "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $BACKUP_DIR"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
check_project() {
    if [[ ! -d "$PROJECT_DIR" ]]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
create_backup() {
    local backup_path="$BACKUP_DIR/$BACKUP_NAME"
    
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤: $backup_path"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local temp_dir="/tmp/$BACKUP_NAME"
    mkdir -p "$temp_dir"
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print_status "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    if [[ -f "$PROJECT_DIR/bot_database.db" ]]; then
        cp "$PROJECT_DIR/bot_database.db" "$temp_dir/"
        print_status "‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
    else
        print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    cp "$PROJECT_DIR/.env" "$temp_dir/" 2>/dev/null || print_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    cp "$PROJECT_DIR/ecosystem.config.js" "$temp_dir/" 2>/dev/null || print_error "–§–∞–π–ª ecosystem.config.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    cp "$PROJECT_DIR/package.json" "$temp_dir/" 2>/dev/null
    cp "$PROJECT_DIR/package-lock.json" "$temp_dir/" 2>/dev/null
    
    # –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)
    if [[ -d "$PROJECT_DIR/logs" ]]; then
        mkdir -p "$temp_dir/logs"
        for log_file in "$PROJECT_DIR/logs"/*.log; do
            if [[ -f "$log_file" ]]; then
                tail -n 1000 "$log_file" > "$temp_dir/logs/$(basename "$log_file")" 2>/dev/null
            fi
        done
        print_status "‚úì –õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞..."
    cd /tmp
    tar -czf "$backup_path.tar.gz" "$BACKUP_NAME"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    rm -rf "$temp_dir"
    
    if [[ -f "$backup_path.tar.gz" ]]; then
        local size=$(du -h "$backup_path.tar.gz" | cut -f1)
        print_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_path.tar.gz ($size)"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        cat > "$backup_path.info" << EOF
Backup Information
==================
Date: $(date)
Project Directory: $PROJECT_DIR
Backup Size: $size
Files Included:
- Database (bot_database.db)
- Configuration (.env, ecosystem.config.js)
- Package files (package.json, package-lock.json)
- Recent logs (last 1000 lines)

Restore Instructions:
1. Extract: tar -xzf $BACKUP_NAME.tar.gz
2. Copy files to project directory
3. Restart bot: sudo -u botuser pm2 restart subscription-checker-bot
EOF
        print_status "‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞"
        exit 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
cleanup_old_backups() {
    local keep_days=${1:-7}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ö—Ä–∞–Ω–∏–º 7 –¥–Ω–µ–π
    
    print_status "–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å—Ç–∞—Ä—à–µ $keep_days –¥–Ω–µ–π..."
    
    find "$BACKUP_DIR" -name "subbot_backup_*.tar.gz" -mtime +$keep_days -delete 2>/dev/null
    find "$BACKUP_DIR" -name "subbot_backup_*.info" -mtime +$keep_days -delete 2>/dev/null
    
    local remaining=$(find "$BACKUP_DIR" -name "subbot_backup_*.tar.gz" | wc -l)
    print_status "‚úì –û—Å—Ç–∞–ª–æ—Å—å —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $remaining"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
verify_backup() {
    local backup_file="$BACKUP_DIR/$BACKUP_NAME.tar.gz"
    
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    
    if tar -tzf "$backup_file" >/dev/null 2>&1; then
        print_success "‚úì –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
    else
        print_error "‚úó –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞"
        exit 1
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_notification() {
    if [[ -f "$PROJECT_DIR/.env" ]]; then
        source "$PROJECT_DIR/.env"
        
        if [[ -n "$BOT_TOKEN" && -n "$ADMIN_CHAT_ID" ]]; then
            local backup_size=$(du -h "$BACKUP_DIR/$BACKUP_NAME.tar.gz" | cut -f1)
            local message="üíæ *Backup completed*%0A%0ADate: $(date)%0ASize: $backup_size%0ALocation: $BACKUP_DIR"
            
            curl -s "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
                 -d "chat_id=$ADMIN_CHAT_ID" \
                 -d "text=$message" \
                 -d "parse_mode=Markdown" >/dev/null 2>&1
        fi
    fi
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
show_backup_stats() {
    print_status "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:"
    
    local total_backups=$(find "$BACKUP_DIR" -name "subbot_backup_*.tar.gz" 2>/dev/null | wc -l)
    local total_size=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1)
    
    echo "  –í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $total_backups"
    echo "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
    
    if [[ $total_backups -gt 0 ]]; then
        echo "  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:"
        find "$BACKUP_DIR" -name "subbot_backup_*.tar.gz" -printf "    %f (%TY-%Tm-%Td %TH:%TM)\n" 2>/dev/null | sort -r | head -5
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_success "üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    
    check_project
    create_backup_dir
    create_backup
    verify_backup
    cleanup_old_backups 7
    send_notification
    show_backup_stats
    
    print_success "üéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-backup}" in
    "backup")
        main
        ;;
    "cleanup")
        create_backup_dir
        cleanup_old_backups ${2:-7}
        ;;
    "stats")
        create_backup_dir
        show_backup_stats
        ;;
    "restore")
        if [[ -z "$2" ]]; then
            print_error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <backup_file.tar.gz>"
            exit 1
        fi
        
        print_status "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $2"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        print_error "–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [backup|cleanup|stats|restore]"
        echo "  backup  - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  cleanup - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
        echo "  stats   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"
        echo "  restore - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        exit 1
        ;;
esac 